package com.xym;

import java.io.BufferedWriter;
import java.io.FileWriter;
import java.io.IOException;
import java.io.InputStream;
import java.util.ArrayList;
import java.util.Enumeration;
import java.util.Iterator;
import java.util.List;
import java.util.TooManyListenersException;

import javax.comm.CommPortIdentifier;
import javax.comm.NoSuchPortException;
import javax.comm.PortInUseException;
import javax.comm.SerialPortEvent;
import javax.comm.SerialPortEventListener;
import javax.comm.SerialPort;
import javax.comm.UnsupportedCommOperationException;
import javax.sound.sampled.Port;

public class CallerService implements SerialPortEventListener, Runnable {
	InputStream inputStream;
	SerialPort serialPort = null;
	String localNo;
	/**
	 * @param args
	 * @throws NoSuchPortException
	 */
	public static void main(String[] args) {
	}

	public CallerService() {
	}

	public CallerService(String port,String localNo) {
		
		localNo=localNo;
		CommPortIdentifier portId = null;

		try {
			portId = CommPortIdentifier.getPortIdentifier(port);
			serialPort = (SerialPort) portId.open("SimpleReadApp", 2000);

			inputStream = serialPort.getInputStream();

			serialPort.addEventListener(this);

			serialPort.notifyOnDataAvailable(true);

			serialPort.setSerialPortParams(9600, SerialPort.DATABITS_8,
					SerialPort.STOPBITS_1, SerialPort.PARITY_NONE);

			// 打开来电显示功能
			serialPort.getOutputStream().write("AT+VCID=1".getBytes());
			serialPort.getOutputStream().write(13);// 回车
			System.out.println("Write:AT+VCID=1");

		} catch (NoSuchPortException | PortInUseException | IOException
				| TooManyListenersException | UnsupportedCommOperationException e) {
			e.printStackTrace();
		}
	}

	public String checkSerialPortAvaliable(String comPort) {
		CommPortIdentifier port = null;
		try {
			port = CommPortIdentifier.getPortIdentifier(comPort);
		} catch (NoSuchPortException e) {
			return "找不到SerailPort:" + comPort;
		}
		if (port.isCurrentlyOwned()) {
			return "当前端口:" + comPort + "已被某程序占用";
		}
		// check whether is been used
		SerialPort sp = null;
		try {
			sp = (SerialPort) port.open("JustCheck", 2000);
		} catch (PortInUseException e) {
			return "当前端口:" + comPort + "已被使用";
		} finally {
			if (sp != null)
				sp.close();
		}
		// serailPort=(SerialPort)port;
		return "ok";
	}

	public List<String> getSerialPorts() {
		Enumeration portList = CommPortIdentifier.getPortIdentifiers();
		CommPortIdentifier portId;
		List<String> list = new ArrayList<String>();
		while (portList.hasMoreElements()) {
			portId = (CommPortIdentifier) portList.nextElement();
			if (portId.getPortType() == CommPortIdentifier.PORT_SERIAL) {
				list.add(portId.getName());
				/*
				 * if (portId.getName().equals("COM1")) { // if
				 * (portId.getName().equals("/dev/term/a")) { }
				 */

			}
		}
		return list;

	}

	@Override
	public void serialEvent(SerialPortEvent event) {
		switch (event.getEventType()) {
		case SerialPortEvent.BI:
		case SerialPortEvent.OE:
		case SerialPortEvent.FE:
		case SerialPortEvent.PE:
		case SerialPortEvent.CD:
		case SerialPortEvent.CTS:
		case SerialPortEvent.DSR:
		case SerialPortEvent.RI:
		case SerialPortEvent.OUTPUT_BUFFER_EMPTY:
			break;
		case SerialPortEvent.DATA_AVAILABLE:
			byte[] readBuffer = new byte[50];

			try {
				while (inputStream.available() > 0) {
					int numBytes = inputStream.read(readBuffer);
				}
				// System.out.print(new String(readBuffer));
				handleCallerNo(new String(readBuffer));
			} catch (IOException e) {
				e.printStackTrace();
			}
			break;
		}

	}

	private String handleCallerNo(String str) throws IOException {
		String date, time, no = null;
		if (str == null || str.trim().isEmpty())
			return null;
		/*
		 * DATE = 0727 TIME = 1744 NMBR = 13578899365
		 */
		if (str.contains("NMBR")) {
			date = str.subSequence(str.indexOf("DATE") + 7,
					str.indexOf("DATE") + 11).toString();
			time = str.subSequence(str.indexOf("TIME") + 7,
					str.indexOf("TIME") + 11).toString();
			no = str.subSequence(str.indexOf("NMBR") + 7, str.length())
					.toString().trim();
			System.out.println(date + "," + time + "," + no);

			BufferedWriter bufferedWriter = new BufferedWriter(new FileWriter(
					"g:\\callerLog.csv", true));
			bufferedWriter.write(localNo+","+date + "," + time + "," + no);
			bufferedWriter.newLine();

			new TranslucentFrame().showMsgOnRightCorner("来电", "<h1>" + no
					+ "</h1>");

			bufferedWriter.close();
		}

		return no;
	}

	@Override
	public void run() {
		try {

			Thread.sleep(20000);
		} catch (InterruptedException e) {
			System.out.println(e.getMessage());
			serialPort.close();
		}
	}
}
